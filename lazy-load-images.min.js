class LazyImageLoader{constructor(){this.images=document.querySelectorAll("[data-src]"),this.imageCount=this.images.length,this.config={rootMargin:"50px 0px",threshold:.01},this.main()}main(){void 0===window.IntersectionObserver?this.loadImagesImmediately(images):(this.observer=new IntersectionObserver(this.onIntersection.bind(this),this.config),this.images.forEach(e=>{e.classList.contains("js-lazy-image--handled")||this.observer.observe(e)}))}fetchImage(e){return new Promise(function(t,s){var a=new Image;a.src=e,a.onload=t,a.onerror=s})}preloadImage(e){if("0"!==e)var t=e.getAttribute("data-src");if(t)return this.fetchImage(t).then(()=>{this.applyImage(e,t)})}loadImagesImmediately(e){for(var t=0;t<this.imageCount;t++)this.preloadImage(e[t])}onIntersection(e){0===this.imageCount&&this.observer.disconnect(),e.forEach(e=>{e.intersectionRatio>0&&(this.imageCount--,this.observer.unobserve(e.target),this.preloadImage(e.target))})}createSVG(e,t){var s=e.getAttribute("id"),a=e.getAttribute("class"),i=new XMLHttpRequest;i.open("GET",t,!0),i.send(),i.onload=function(t){if(i.status>=200&&i.status<400){var r=i.responseXML.querySelector("svg");r.getAttribute("xmlns:a")&&r.removeAttr("xmlns:a"),s&&r.setAttribute("id",s),a&&r.setAttribute("class",a+" replaced-svg"),e.replaceWith(r)}}}applyImage(e,t){e.classList.add("js-lazy-image--handled"),"IMG"===e.tagName?e.classList.contains("svg")?this.createSVG(e,t):e.src=t:e.style.backgroundImage=`url('${t}')`,console.log("applied image",t),document.body.classList.add("lazy-loaded")}}const lazyImageLoader=new LazyImageLoader;