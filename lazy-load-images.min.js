class LazyImageLoader{constructor(){this.images=document.querySelectorAll("[data-src]"),this.imageCount=this.images.length,this.config={rootMargin:"50px 0px",threshold:.01},this.main()}main(){void 0===window.IntersectionObserver?this.loadImagesImmediately(images):(this.observer=new IntersectionObserver(this.onIntersection.bind(this),this.config),this.images.forEach(e=>{e.classList.contains("js-lazy-image--handled")||this.observer.observe(e)}))}fetchImage(e){return new Promise(function(a,t){var s=new Image;s.src=e,s.onload=a,s.onerror=t})}preloadImage(e){if("0"!==e)var a=e.getAttribute("data-src");if(a)return this.fetchImage(a).then(()=>{this.applyImage(e,a)})}loadImagesImmediately(e){for(var a=0;a<this.imageCount;a++)this.preloadImage(e[a])}onIntersection(e){0===this.imageCount&&this.observer.disconnect(),e.forEach(e=>{e.intersectionRatio>0&&(this.imageCount--,this.observer.unobserve(e.target),this.preloadImage(e.target))})}applyImage(e,a){e.classList.add("js-lazy-image--handled"),"IMG"===e.tagName?e.src=a:e.style.backgroundImage=`url('${a}')`,console.log("applied image",a)}}const lazyImageLoader=new LazyImageLoader;